$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 > clk $end
  $var wire 1 ? reset $end
  $var wire 16 @ d_out [15:0] $end
  $var wire 1 A done $end
  $scope module top_module $end
   $var wire 1 > clk $end
   $var wire 1 ? reset $end
   $var wire 16 @ d_out [15:0] $end
   $var wire 1 A done $end
   $var wire 16 5 instruction [15:0] $end
   $var wire 16 6 last_alu_result [15:0] $end
   $var wire 1 # en_pc $end
   $var wire 1 E en_new_pc $end
   $var wire 1 7 branch $end
   $var wire 1 B branch_res $end
   $var wire 12 C new_pc [11:0] $end
   $scope module branch_logic $end
    $var wire 16 5 instruction [15:0] $end
    $var wire 1 > clk $end
    $var wire 16 6 last_alu_result [15:0] $end
    $var wire 12 C new_pc [11:0] $end
    $var wire 1 B branch_res $end
    $var wire 1 7 branch $end
   $upscope $end
   $scope module core $end
    $var wire 16 5 instruction [15:0] $end
    $var wire 1 > clk $end
    $var wire 1 8 run $end
    $var wire 1 ? reset $end
    $var wire 16 6 d_out [15:0] $end
    $var wire 1 # done $end
    $var wire 16 5 reg_i [15:0] $end
    $var wire 16 $ reg_c [15:0] $end
    $var wire 16 % reg_s [15:0] $end
    $var wire 16 & registers[0] [15:0] $end
    $var wire 16 ' registers[1] [15:0] $end
    $var wire 16 ( registers[2] [15:0] $end
    $var wire 16 ) registers[3] [15:0] $end
    $var wire 16 * registers[4] [15:0] $end
    $var wire 16 + registers[5] [15:0] $end
    $var wire 16 , registers[6] [15:0] $end
    $var wire 16 - registers[7] [15:0] $end
    $var wire 1 . en_c $end
    $var wire 1 / en_s $end
    $var wire 32 0 cpp_result [31:0] $end
    $var wire 3 9 Rx [2:0] $end
    $var wire 3 : Ry [2:0] $end
    $var wire 3 ; sel [2:0] $end
    $var wire 8 D en_reg [7:0] $end
    $var wire 16 6 result [15:0] $end
    $var wire 16 1 operand [15:0] $end
    $var wire 2 < format [1:0] $end
    $scope module alu $end
     $var wire 16 % in_a [15:0] $end
     $var wire 16 1 in_b [15:0] $end
     $var wire 3 ; select [2:0] $end
     $var wire 16 6 alu_out [15:0] $end
     $var wire 32 F add [31:0] $end
     $var wire 32 G sub [31:0] $end
     $var wire 32 H and_op [31:0] $end
     $var wire 32 I or_op [31:0] $end
     $var wire 32 J xor_op [31:0] $end
     $var wire 32 K shl [31:0] $end
     $var wire 32 L shr [31:0] $end
     $var wire 32 M cmp [31:0] $end
    $upscope $end
    $scope module control $end
     $var wire 16 5 instruction [15:0] $end
     $var wire 1 8 run $end
     $var wire 1 > clk $end
     $var wire 1 ? reset $end
     $var wire 1 / en_s $end
     $var wire 1 . en_c $end
     $var wire 8 D en_reg [7:0] $end
     $var wire 1 # done $end
     $var wire 2 2 state [1:0] $end
     $var wire 2 3 next_state [1:0] $end
     $var wire 3 = Rx [2:0] $end
    $upscope $end
   $upscope $end
   $scope module fetch $end
    $var wire 1 > clk $end
    $var wire 1 ? reset $end
    $var wire 1 # en_pc $end
    $var wire 12 C new_pc [11:0] $end
    $var wire 1 B en_new_pc $end
    $var wire 16 5 instruction [15:0] $end
    $var wire 12 4 pc [11:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b0000000000000000 $
b0000000000000000 %
b0000000000000000 &
b0000000000000000 '
b0000000000000000 (
b0000000000000000 )
b0000000000000000 *
b0000000000000000 +
b0000000000000000 ,
b0000000000000000 -
0.
1/
b00000000000000000000000000000000 0
b0000000000000000 1
b00 2
b01 3
b000000000000 4
b0000000000000000 5
b0000000000000000 6
07
18
b000 9
b000 :
b000 ;
b00 <
b000 =
1>
0?
b0000000000000000 @
0A
0B
b000000000000 C
b00000000 D
0E
b00000000000000000000000000000000 F
b00000000000000000000000000000001 G
b00000000000000000000000000000010 H
b00000000000000000000000000000011 I
b00000000000000000000000000000100 J
b00000000000000000000000000000101 K
b00000000000000000000000000000110 L
b00000000000000000000000000000111 M
#1
0>
#2
1.
0/
b01 2
b10 3
1>
#3
0>
#4
1#
0.
b10 2
b00 3
1>
1A
b00000001 D
#5
0>
#6
0#
1/
b00 2
b01 3
b000000000001 4
b0010111101000011 5
b001 9
b011 :
b11 <
b001 =
1>
0A
b00000000 D
#7
0>
#8
1.
0/
b01 2
b10 3
1>
#9
0>
#10
1#
0.
b10 2
b00 3
1>
1A
b00000010 D
#11
0>
#12
0#
1/
b00 2
b01 3
b000000000010 4
b0100000110100111 5
b010 9
b000 :
b001 ;
b010 =
1>
0A
b00000000 D
#13
0>
#14
1.
0/
b01 2
b10 3
1>
#15
0>
#16
1#
0.
b10 2
b00 3
1>
1A
b00000100 D
#17
0>
#18
0#
1/
b00 2
b01 3
b000000000011 4
b0011101011110001 5
b001 9
b110 :
b100 ;
b01 <
b001 =
1>
0A
b00000000 D
#19
0>
#20
1.
0/
b0000000011010111 1
b01 2
b10 3
b0000000011010111 6
1>
b0000000011010111 @
#21
0>
#22
1#
b0000000011010111 $
0.
b00000000000000000000000011010111 0
b10 2
b00 3
1>
1A
b00000010 D
#23
0>
#24
0#
b0000000011010111 '
1/
b00 2
b01 3
b000000000100 4
b1010110011011001 5
b0000000000000000 6
b101 9
b011 :
b110 ;
b101 =
1>
b0000000000000000 @
0A
b00000000 D
#25
0>
#26
1.
0/
b0000000001100110 1
b01 2
b10 3
1>
#27
0>
#28
1#
b0000000000000000 $
0.
b00000000000000000000000000000000 0
b10 2
b00 3
1>
1A
b00100000 D
#29
0>
#30
0#
1/
b00 2
b01 3
b000000000101 4
b0010101100010001 5
b0000000001100110 6
b001 9
b010 :
b100 ;
b001 =
1>
b0000000001100110 @
0A
b00000000 D
#31
0>
#32
b0000000011010111 %
1.
0/
b0000000001011000 1
b01 2
b10 3
b0000000010001111 6
1>
b0000000010001111 @
#33
0>
#34
1#
b0000000010001111 $
0.
b00000000000000000000000010001111 0
b10 2
b00 3
1>
1A
b00000010 D
#35
0>
#36
0#
b0000000010001111 '
1/
b00 2
b01 3
b000000000110 4
1>
0A
b00000000 D
#37
0>
#38
b0000000010001111 %
1.
0/
b01 2
b10 3
b0000000011010111 6
1>
b0000000011010111 @
#39
0>
#40
1#
b0000000011010111 $
0.
b00000000000000000000000011010111 0
b10 2
b00 3
1>
1A
b00000010 D
#41
0>
#42
0#
b0000000011010111 '
1/
b00 2
b01 3
b000000000111 4
b1101101011001000 5
b0000000000001000 6
b110 9
b110 :
b010 ;
b00 <
b110 =
1>
b0000000000001000 @
0A
b00000000 D
#43
0>
#44
b0000000000000000 %
1.
0/
b01 2
b10 3
b0000000000000000 6
1>
b0000000000000000 @
#45
0>
#46
1#
b0000000000000000 $
0.
b00000000000000000000000000000000 0
b10 2
b00 3
1>
1A
b01000000 D
#47
0>
#48
0#
1/
b00 2
b01 3
b000000001000 4
b1000111011011000 5
b100 9
b011 :
b110 ;
b100 =
1>
0A
b00000000 D
#49
0>
#50
1.
0/
b01 2
b10 3
1>
#51
0>
#52
1#
0.
b10 2
b00 3
1>
1A
b00010000 D
#53
0>
#54
0#
1/
b00 2
b01 3
b000000001001 4
b0000100111111110 5
b0000000000000010 6
17
08
b000 9
b010 :
b111 ;
b10 <
b000 =
1>
b0000000000000010 @
0A
b00000000 D
#55
0>
#56
b000000001010 4
b0000010001001101 5
b0000000001011000 6
07
18
b001 :
b011 ;
b01 <
1>
b0000000001011000 @
#57
0>
#58
1.
0/
b0000000000100010 1
b01 2
b10 3
b0000000000100010 6
1>
b0000000000100010 @
#59
0>
#60
1#
b0000000000100010 $
0.
b00000000000000000000000000100010 0
b10 2
b00 3
1>
1A
b00000001 D
#61
0>
#62
0#
b0000000000100010 &
1/
b00 2
b01 3
b000000001011 4
b1001100010011000 5
b0000000000000000 6
b100 9
b110 :
b110 ;
b00 <
b100 =
1>
b0000000000000000 @
0A
b00000000 D
#63
0>
#64
1.
0/
b01 2
b10 3
1>
#65
0>
#66
1#
b0000000000000000 $
0.
b00000000000000000000000000000000 0
b10 2
b00 3
1>
1A
b00010000 D
#67
0>
#68
0#
1/
b00 2
b01 3
b000000001100 4
b0011110001010101 5
b001 9
b111 :
b101 ;
b01 <
b001 =
1>
0A
b00000000 D
#69
0>
#70
b0000000011010111 %
1.
0/
b0000000011100010 1
b01 2
b10 3
1>
#71
0>
#72
1#
0.
b10 2
b00 3
1>
1A
b00000010 D
#73
0>
#74
0#
b0000000000000000 '
1/
b00 2
b01 3
b000000001101 4
b0001001010001100 5
b0000000011110111 6
b000 9
b100 :
b011 ;
b00 <
b000 =
1>
b0000000011110111 @
0A
b00000000 D
#75
0>
#76
b0000000000100010 %
1.
0/
b01 2
b10 3
b0000000011100010 6
1>
b0000000011100010 @
#77
0>
#78
1#
b0000000011100010 $
0.
b00000000000000000000000011100010 0
b10 2
b00 3
1>
1A
b00000001 D
#79
0>
