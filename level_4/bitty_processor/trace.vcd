$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 ? clk $end
  $var wire 1 @ reset $end
  $var wire 1 A done $end
  $var wire 16 B result [15:0] $end
  $var wire 3 C select [2:0] $end
  $scope module top_module $end
   $var wire 1 ? clk $end
   $var wire 1 @ reset $end
   $var wire 1 A done $end
   $var wire 16 B result [15:0] $end
   $var wire 3 C select [2:0] $end
   $var wire 1 # en_i $end
   $var wire 1 $ en_s $end
   $var wire 1 % en_c $end
   $var wire 1 & en_pc $end
   $var wire 8 ' en_reg [7:0] $end
   $var wire 16 D instruction [15:0] $end
   $var wire 32 G IDLE [31:0] $end
   $var wire 32 H LOAD [31:0] $end
   $var wire 32 I CALC [31:0] $end
   $var wire 32 J STORE [31:0] $end
   $var wire 32 K DONE [31:0] $end
   $var wire 3 ( state [2:0] $end
   $var wire 3 E next_state [2:0] $end
   $scope module fetch $end
    $var wire 1 ? clk $end
    $var wire 1 @ reset $end
    $var wire 1 & en $end
    $var wire 16 D instruction [15:0] $end
    $var wire 8 ) pc [7:0] $end
   $upscope $end
   $scope module u_ControlUnit $end
    $var wire 16 D instruction [15:0] $end
    $var wire 1 ? clk $end
    $var wire 1 @ reset $end
    $var wire 1 $ en_s $end
    $var wire 1 % en_c $end
    $var wire 1 # en_i $end
    $var wire 8 ' en_reg [7:0] $end
    $var wire 1 A done $end
    $var wire 16 B d_out [15:0] $end
    $var wire 3 C select [2:0] $end
    $var wire 16 * reg_s [15:0] $end
    $var wire 16 + reg_c [15:0] $end
    $var wire 16 , reg_i [15:0] $end
    $var wire 16 - result [15:0] $end
    $var wire 3 . state [2:0] $end
    $var wire 3 L next_state [2:0] $end
    $var wire 16 / registers[0] [15:0] $end
    $var wire 16 0 registers[1] [15:0] $end
    $var wire 16 1 registers[2] [15:0] $end
    $var wire 16 2 registers[3] [15:0] $end
    $var wire 16 3 registers[4] [15:0] $end
    $var wire 16 4 registers[5] [15:0] $end
    $var wire 16 5 registers[6] [15:0] $end
    $var wire 16 6 registers[7] [15:0] $end
    $var wire 2 7 format [1:0] $end
    $var wire 3 8 Rx [2:0] $end
    $var wire 3 9 Ry [2:0] $end
    $var wire 16 : operand [15:0] $end
    $var wire 3 C sel [2:0] $end
    $var wire 16 ; y [15:0] $end
    $var wire 32 < i [31:0] $end
    $var wire 32 = cpp_result [31:0] $end
    $var wire 6 F tests [5:0] $end
    $scope module b_alu $end
     $var wire 16 > in_a [15:0] $end
     $var wire 16 : in_b [15:0] $end
     $var wire 3 C select [2:0] $end
     $var wire 16 - alu_out [15:0] $end
     $var wire 32 G add [31:0] $end
     $var wire 32 H sub [31:0] $end
     $var wire 32 I and_op [31:0] $end
     $var wire 32 J or_op [31:0] $end
     $var wire 32 K xor_op [31:0] $end
     $var wire 32 M shl [31:0] $end
     $var wire 32 N shr [31:0] $end
     $var wire 32 O cmp [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


